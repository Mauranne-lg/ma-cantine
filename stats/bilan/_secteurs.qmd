---
title: "Bilan statistique de la campagne ma-cantine portant sur l'ann√©e 2023 (travail en cours)"
---

# Focus par secteurs

Nous nous int√©ressions √† la r√©partition des t√©l√©d√©claration en fonction des secteurs principaux et secondaires, pour la campagne sur les donn√©es 2023. Nous utilisons la strat√©gie **Je Ne Sais Pas** pour le traitement des valeurs manquantes.

::: {.callout-note}
Les cuisines centrales ont √©t√© supprim√©es car elles cumulent plusieurs secteurs (`central` et `central_serving`)
:::


```{python}
# | echo: false
# | output: asis

import utils
import pandas as pd
import ast
tds = {}

# Whether we use cache or ot, we re-read the file to have consistency in the dataframe
for year in utils.CAMPAGNES.keys():
    tds[year] = pd.read_csv(f"data/export_dataset_stats_campagne_{year}.csv", sep=";")
    # Application de la strat√©gie Je Ne Sais pas
    tds[f"Campagne {year}"] = tds[year].dropna(
        how="any",
        subset=[
            "teledeclaration.value_total_ht",
            "teledeclaration.value_bio_ht",
        ],
    )
```

```{python}
# | echo: false
# | output: asis

def traitement_secteurs(tds, year):
    df = tds[year].copy()
     
    if '2022' not in year:  # Transform the dict into a list of category
        df["canteen.sectors_"] = df["canteen.sectors"].fillna('[]')
        df["canteen.sectors_"] = df["canteen.sectors_"].apply(lambda x: [utils.normalize_sector(item["name"]) for item in ast.literal_eval(x)])
    else:
        df["canteen.sectors_"] = df["canteen.sectors"].fillna('')
        df["canteen.sectors_"] = df["canteen.sectors_"].apply(utils.mapper_sector_diff)
        df["canteen.sectors_"] = df["canteen.sectors_"].apply(lambda x: utils.normalize_sector(x).split(","))
    # Process all central kitchen as one sector
    df['canteen.sectors_'] = df['canteen.sectors_'].apply(lambda x: ['secteurs multiples'] if str(x).count(',') > 0 else x)
    df['canteen.sectors_'].to_csv('sectors.csv')

    # Explode the lists into separate rows
    df_exploded = df.explode("canteen.sectors_")

    # Use get_dummies to create dummy columns for each category
    categories_dummies = pd.get_dummies(df_exploded["canteen.sectors_"])

    # Group by the index (items) and sum the dummy columns
    categories_dummies_grouped = categories_dummies.groupby(by=categories_dummies.index).sum()
    
    # Concatenate the dummy columns with the original DataFrame
    df_normalized = pd.concat([df, categories_dummies_grouped], axis=1)

    # Drop the 'categories' column since we have the dummies
    df_normalized = df_normalized.drop(columns=["canteen.sectors_"])

    return df_normalized

def calcul_indicateurs_secteurs(tds, year, suffix=''):
    sectors = {}
    sectors[year] = {}
    df_processed_sectors = traitement_secteurs(tds, year)

    sectors_normalized = {utils.normalize_sector(k):utils.normalize_sector(v) for k,v in utils.SECTORS.items()}

    columns_sectors = [utils.normalize_sector(col) for col in df_processed_sectors.columns]
    for cat in sectors_normalized.keys():
        cat = utils.normalize_sector(cat)
        sectors[year][cat] = {}
        if cat in columns_sectors:
            df_cat = df_processed_sectors[df_processed_sectors[cat] > 0]
            # Couverture
            sectors[year][cat][f'Nombre de TD{suffix}'] = df_cat[cat].sum()
            sectors[year][cat][f'Taux achats secteurs{suffix}'] = df_cat["teledeclaration.value_total_ht"].sum()/ tds[year]["teledeclaration.value_total_ht"].sum()
            sectors[year][cat][f'Taux des TD pris en compte{suffix}'] = len(df_cat[cat])/len(tds[year])
            sectors[year][cat][f'Montant total des achats{suffix}'] = df_cat["teledeclaration.value_total_ht"].sum()
            # Bio
            sectors[year][cat][f'Montant des achats Bio{suffix}'] = df_cat["teledeclaration.value_bio_ht"].sum()
            # EGAlim
            sectors[year][cat][f'Montant des achats EGAlim{suffix}'] = df_cat["teledeclaration.value_bio_ht"].sum() + df_cat["teledeclaration.value_externality_performance_ht"].sum() + df_cat["teledeclaration.value_sustainable_ht"].sum() + df_cat["teledeclaration.value_egalim_others_ht"].sum()
            # Caract√©ristiques cuisine
            sectors[year][cat][f'Nombre TD cuisine centrale{suffix}'] = df_cat[df_cat["canteen.production_type"].isin(['central', 'central_serving'])]['canteen.id'].count()
            sectors[year][cat][f'Nombre TD satellite{suffix}'] = df_cat[df_cat["canteen.production_type"].isin(['site', 'site_cooked_elsewhere'])]['canteen.id'].count()
            sectors[year][cat][f'Nombre TD gestion directe{suffix}'] = df_cat[df_cat["canteen.management_type"] == 'direct']['canteen.id'].count()
            sectors[year][cat][f'Nombre TD gestion conc√©d√©e{suffix}'] = df_cat[df_cat["canteen.management_type"] == 'conceded']['canteen.id'].count()
            # Cout denr√©es
            sectors[year][cat][f'Co√ªt denr√©es/repas{suffix} (moyenne)'] = df_cat["teledeclaration.value_total_ht"].sum() /df_cat["canteen.yearly_meal_count"].sum()
            sectors[year][cat][f'Nombre de repas/an{suffix}'] = df_cat["canteen.yearly_meal_count"].sum()


    summary = pd.DataFrame.from_dict(sectors[year]).T
    # Ajout des cat√©gories pour caract√©riser chaque sous-cat√©gorie
    summary['sector'] = summary.index.map(sectors_normalized)
    summary = summary.reset_index(names='sub_sector')

    # Calcul des totaux par secteurs
    summary_by_sector = summary.groupby(['sector']).sum()
    summary_by_sector['sub_sector'] = ['total (somme)'] * len(summary_by_sector)
    summary_by_sector = summary_by_sector.reset_index(names='sector')

    # Agregation des sous secteur et secteurs
    summary_by_sub_sector = pd.concat([summary, summary_by_sector])
    summary_by_sub_sector = summary_by_sub_sector.groupby(['sector', 'sub_sector']).sum()

    # Calcul des taux (ne peut pas √™tre fait avant a cause de l aggregation)
    summary_by_sub_sector[f'Taux des achats Bio{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Montant des achats Bio{suffix}'] / x[f'Montant total des achats{suffix}'], axis=1)
    summary_by_sub_sector[f'Taux des achats EGAlim{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Montant des achats EGAlim{suffix}'] / x[f'Montant total des achats{suffix}'], axis=1)
    summary_by_sub_sector[f'Taux achats secteurs{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Montant total des achats{suffix}'] / tds[year]["teledeclaration.value_total_ht"].sum(), axis=1)
    
    summary_by_sub_sector[f'Taux cuisine centrale{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Nombre TD cuisine centrale{suffix}'] / x[f'Nombre de TD{suffix}'], axis=1)
    summary_by_sub_sector[f'Taux satellite{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Nombre TD satellite{suffix}'] / x[f'Nombre de TD{suffix}'], axis=1)

    summary_by_sub_sector[f'Taux TD gestion conc√©d√©e{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Nombre TD gestion conc√©d√©e{suffix}'] / x[f'Nombre de TD{suffix}'], axis=1)
    summary_by_sub_sector[f'Taux TD gestion directe{suffix}'] = summary_by_sub_sector.apply(lambda x: x[f'Nombre TD gestion directe{suffix}'] / x[f'Nombre de TD{suffix}'], axis=1)

    summary_by_sub_sector[f'Co√ªt denr√©es/repas{suffix} (moyenne)'] = summary_by_sub_sector.apply(lambda x: x[f'Montant total des achats{suffix}'] / x[f'Nombre de repas/an{suffix}'], axis=1)

    del summary_by_sub_sector[f'Nombre TD satellite{suffix}']
    del summary_by_sub_sector[f'Nombre TD cuisine centrale{suffix}']
    del summary_by_sub_sector[f'Nombre de repas/an{suffix}']


    return summary_by_sub_sector

col_order = ['Nombre de TD', 'Taux des TD pris en compte', 'Montant total des achats',	'Taux achats secteurs',	'Co√ªt denr√©es/repas (moyenne)',	'Montant des achats Bio', 'Taux des achats Bio', 'Montant des achats EGAlim', 'Taux des achats EGAlim',	'Nombre TD gestion directe', 'Taux TD gestion directe',	'Nombre TD gestion conc√©d√©e', 'Taux TD gestion conc√©d√©e',	'Taux cuisine centrale', 'Taux satellite']
summary_2022 = calcul_indicateurs_secteurs(tds, 'Campagne 2022')
```

## üì∑ 2022
```{python}
# | echo: false
# | output: asis

utils.display_indicateurs(summary_2022, transpose=False, col_order=col_order)
```

## üì∑ 2023
```{python}
# | echo: false
# | output: asis

summary_2023 = calcul_indicateurs_secteurs(tds, 'Campagne 2023')
utils.display_indicateurs(summary_2023, transpose=False, col_order=col_order)
```

```{python}
# | echo: false
# | output: asis

summary = calcul_indicateurs_secteurs(tds, 'Campagne 2023')

def display_sub_sector(summary, sector, col_order=None, file_name=''):
    summary_sector = summary[summary.index.isin([sector], level=0)].copy()
    summary_sector = summary_sector.reset_index(0)
    del summary_sector['sector']
    summary_sector.index = summary_sector.index.set_names('Sous Secteur')
    if col_order:
        summary_sector = summary_sector[col_order]
    utils.display_indicateurs(summary_sector, transpose=False)
    with pd.ExcelWriter(f'data/{file_name}.xlsx', engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:  
        summary_sector.to_excel(writer, sheet_name=sector)
    
print('### Enseignement')
display_sub_sector(summary, 'education', file_name='photo_2023_secteurs', col_order=col_order)

print('### M√©dico Social')
display_sub_sector(summary, 'social', file_name='photo_2023_secteurs', col_order=col_order)

print('### Sant√©')
display_sub_sector(summary, 'health', file_name='photo_2023_secteurs', col_order=col_order)

print('### Administration')
display_sub_sector(summary, 'administration', file_name='photo_2023_secteurs', col_order=col_order)

print('### Multi Secteurs')
display_sub_sector(summary, 'multiple_sectors', file_name='photo_2023_secteurs', col_order=col_order)

```

## ‚öñÔ∏è Comparaison isop√©rim√®tre
```{python}
# | echo: false
# | output: asis
summary_2022 = calcul_indicateurs_secteurs(tds_commun, 'Campagne 2022', suffix=' 2022')
summary_2023 = calcul_indicateurs_secteurs(tds_commun, 'Campagne 2023', suffix=' 2023')
summary = pd.concat([summary_2022, summary_2023], axis=1)
# utils.display_indicateurs(summary, transpose=False)

```
```{python}
# | echo: false
# | output: asis

def display_sub_sector_iso(summary, sector, col_order=None, file_name=''):
    summary_sector = summary[summary.index.isin([sector], level=0)].copy()
    summary_sector = summary_sector.reset_index(0)
    del summary_sector['sector']
    summary_sector.index = summary_sector.index.set_names('Sous Secteur')
    if col_order:
        summary_sector = summary_sector[col_order]
    utils.display_indicateurs(summary_sector, transpose=False)
    with pd.ExcelWriter(f'data/{file_name}.xlsx', engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        for year in utils.CAMPAGNES.keys():
            summary_sector.filter(like=year, axis=1).to_excel(writer, sheet_name=f'{sector}_{year}')

print('### Enseignement')
display_sub_sector_iso(summary, 'education', file_name='isoperimetre_secteurs')

print('### M√©dico Social')
display_sub_sector_iso(summary, 'social',  file_name='isoperimetre_secteurs')

print('### Sant√©')
display_sub_sector_iso(summary, 'health', file_name='isoperimetre_secteurs')

print('### Administration')
display_sub_sector_iso(summary, 'administration', file_name='isoperimetre_secteurs')

print('### Multi Secteurs')
display_sub_sector_iso(summary, 'multiple_sectors', file_name='isoperimetre_secteurs')

print('### Secteur loisir')
display_sub_sector_iso(summary, 'leisure', file_name='isoperimetre_secteurs')

print('### Secteur Entreprises')
display_sub_sector_iso(summary, 'enterprise', file_name='isoperimetre_secteurs')

```

### Comparer la photo 2022 et 2023 en fonction des secteurs
```{python}
# | echo: false
# | output: asis

mapper_trad = {
    'social': 'M√©dico-Social',
    'multiple_sectors': 'Secteurs multiples',
    'health': 'Sant√©',
    'education': '√âducation',
    'administration': 'Administration',
}

summary_2022 = calcul_indicateurs_secteurs(tds, 'Campagne 2022', suffix=' 2022')
summary_2023 = calcul_indicateurs_secteurs(tds, 'Campagne 2023', suffix=' 2023')
df = pd.concat([summary_2022, summary_2023], axis=1)
df = df.reset_index()
df['sector'] = df['sector'].map(mapper_trad)
print(df)
df = df.groupby('sector').sum()[['Nombre de TD 2022', 'Nombre de TD 2023']]
df['Photo 2022'] = df['Nombre de TD 2022'].apply(lambda x: x/df['Nombre de TD 2022'].sum())
df['Photo 2023'] = df['Nombre de TD 2023'].apply(lambda x: x/df['Nombre de TD 2023'].sum())
df = df[df['Photo 2022'] > 0.02]
utils.display_stacked_bars(
    df[['Photo 2022', 'Photo 2023']], title="Comparaison des profils des t√©l√©d√©clarants des campagnes 2022 et 2023, sur les secteurs principaux", fmt=utils.taux_formatter, iso=False
)
```